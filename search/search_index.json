{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to Pandas This tutorial guide you to fundamentals of Pandas for DataFrame, indexing, subframing, meging, concatation, plotting, lambda transformation etc.","title":"Home"},{"location":"#introduction-to-pandas","text":"This tutorial guide you to fundamentals of Pandas for DataFrame, indexing, subframing, meging, concatation, plotting, lambda transformation etc.","title":"Introduction to Pandas"},{"location":"pandas/","text":"Introduction to Pandas Course Track: DataFrame Indexing Data Exploration GroupBy Lambda Transformation","title":"Introduction"},{"location":"pandas/#introduction-to-pandas","text":"Course Track: DataFrame Indexing Data Exploration GroupBy Lambda Transformation","title":"Introduction to Pandas"},{"location":"DataFrame/dataframe/","text":"Data View with Titanic dataset import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline sns . set() Load data titanic = pd . read_csv( 'data/titanic.csv' ) titanic . head( 10 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S 5 6 0 3 Moran, Mr. James male NaN 0 0 330877 8.4583 NaN Q 6 7 0 1 McCarthy, Mr. Timothy J male 54.0 0 0 17463 51.8625 E46 S 7 8 0 3 Palsson, Master. Gosta Leonard male 2.0 3 1 349909 21.0750 NaN S 8 9 1 3 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) female 27.0 0 2 347742 11.1333 NaN S 9 10 1 2 Nasser, Mrs. Nicholas (Adele Achem) female 14.0 1 0 237736 30.0708 NaN C titanic . shape (891, 12) titanic . columns Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], dtype='object') titanic . index RangeIndex(start=0, stop=891, step=1) Preliminary Satatistics titanic . describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Age SibSp Parch Fare count 891.000000 891.000000 891.000000 714.000000 891.000000 891.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 0.381594 32.204208 std 257.353842 0.486592 0.836071 14.526497 1.102743 0.806057 49.693429 min 1.000000 0.000000 1.000000 0.420000 0.000000 0.000000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 0.000000 7.910400 50% 446.000000 0.000000 3.000000 28.000000 0.000000 0.000000 14.454200 75% 668.500000 1.000000 3.000000 38.000000 1.000000 0.000000 31.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 6.000000 512.329200 Setting Name column as index titanic_df1 = titanic . copy(deep = True ) titanic_df1 = titanic . set_index( 'Name' ) titanic_df1 . head( 2 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C DataFrame Creation (Numpy Array) From Numpy array => Dataframe import random as random A = np . random . rand( 100 , 20 ) A . shape (100, 20) letter = [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'X' ] col_names = [ random . choice(letter)\\ + random . choice(letter)\\ + random . choice(letter)\\ + random . choice(letter) for i in range (A . shape[ 1 ])] col_names ['BHBE', 'FCEX', 'HCDC', 'BABH', 'DHCC', 'BEAH', 'CGCA', 'CBFF', 'GDBX', 'GDBD', 'GCXG', 'EBAF', 'FHFC', 'ADXF', 'XGDB', 'FDCB', 'BGGD', 'CXXC', 'GBDE', 'HGXX'] df = pd . DataFrame(A, columns = col_names ) df . to_csv( 'data/test.csv' ) df . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } BHBE FCEX HCDC BABH DHCC BEAH CGCA CBFF GDBX GDBD GCXG EBAF FHFC ADXF XGDB FDCB BGGD CXXC GBDE HGXX 0 0.505613 0.863802 0.064671 0.044665 0.661631 0.010504 0.441470 0.749321 0.389375 0.468762 0.061095 0.779629 0.262696 0.834874 0.762955 0.464253 0.762709 0.425008 0.131542 0.791414 1 0.722504 0.465511 0.555621 0.843348 0.987537 0.955876 0.788946 0.461034 0.278317 0.269186 0.616559 0.095630 0.552730 0.531865 0.056233 0.796237 0.705609 0.683914 0.168146 0.312616 2 0.577487 0.355478 0.939323 0.547315 0.158492 0.226048 0.941994 0.025595 0.291006 0.549547 0.157811 0.358243 0.297590 0.767994 0.804289 0.349676 0.786392 0.806113 0.386147 0.766741 3 0.612300 0.610556 0.141520 0.657244 0.694400 0.555290 0.912868 0.350494 0.203160 0.703884 0.873016 0.420604 0.361509 0.380023 0.819483 0.988239 0.455447 0.732307 0.063254 0.123586 4 0.476368 0.890201 0.923328 0.931688 0.481882 0.411059 0.540152 0.831890 0.737365 0.681351 0.620813 0.018067 0.794526 0.491711 0.116032 0.096085 0.086113 0.813632 0.828594 0.063989 Data Frame => Numpy Array Data Frame (List of Dictionary) LD = [] for i in range ( 100 ): LD . append({ 'Player' : random . choice(letter) + random . choice(letter) + random . choice(letter) + random . choice(letter),\\ 'game1' : random . uniform( 0 , 1 ),\\ 'game2' : random . uniform( 0 , 1 ),\\ 'game3' : random . uniform( 0 , 1 ), 'game4' : random . uniform( 0 , 1 ), 'game5' : random . uniform( 0 , 1 )}) DF = pd . DataFrame(LD) DF . head( 10 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Player game1 game2 game3 game4 game5 0 CGHX 0.222859 0.370064 0.966385 0.350200 0.294583 1 FFHX 0.390963 0.339934 0.614410 0.251014 0.132956 2 BACC 0.143930 0.217735 0.117256 0.999636 0.566992 3 BCGH 0.499326 0.749363 0.457431 0.087111 0.385008 4 HBCH 0.944682 0.199605 0.372076 0.745106 0.278212 5 DAEE 0.491847 0.137834 0.517073 0.175743 0.289975 6 DCBA 0.747629 0.920831 0.151625 0.168380 0.153710 7 FGBB 0.964832 0.963819 0.465629 0.928988 0.448380 8 EHBF 0.727150 0.743628 0.510928 0.363017 0.856924 9 CXDB 0.448294 0.261936 0.147476 0.539172 0.736563 DF = DF . set_index( 'Player' ) DF . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } game1 game2 game3 game4 game5 Player CGBG 0.030258 0.018657 0.932341 0.586397 0.089513 DXHD 0.759187 0.309100 0.862211 0.094455 0.169772 FDHF 0.058685 0.568902 0.405327 0.592841 0.244399 CGCE 0.130951 0.806490 0.185252 0.341298 0.262757 XHAC 0.433210 0.658711 0.680462 0.682604 0.179386 Data View DF . plot(figsize = [ 18 , 10 ]) <matplotlib.axes._subplots.AxesSubplot at 0x1a19fd8860> DF[ 0 : 50 ] . plot . bar(stacked = True ,figsize = ( 20 , 15 ),fontsize = 10 ) <matplotlib.axes._subplots.AxesSubplot at 0x107cd7198> DF[ 0 : 10 ] . plot . bar(stacked = False ,figsize = ( 20 , 15 ),fontsize = 10 ) <matplotlib.axes._subplots.AxesSubplot at 0x1a1a0b9cf8> from pandas.plotting import scatter_matrix scatter_matrix(DF, alpha = 0.2 , figsize = ( 18 , 15 ), diagonal = 'kde' ) plt . show() DF . plot . hexbin(x = 'game1' , y = 'game2' ,figsize = ( 12 , 10 ), gridsize = 25 ) <matplotlib.axes._subplots.AxesSubplot at 0x1a242a7550> A = np . array([ 1 , 2 , 3 , 4 , 5 ]) type (A) numpy.ndarray A * 2 array([ 2, 4, 6, 8, 10])","title":"Dataframe"},{"location":"DataFrame/dataframe/#data-view-with-titanic-dataset","text":"import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline sns . set()","title":"Data View with Titanic dataset"},{"location":"DataFrame/dataframe/#load-data","text":"titanic = pd . read_csv( 'data/titanic.csv' ) titanic . head( 10 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S 5 6 0 3 Moran, Mr. James male NaN 0 0 330877 8.4583 NaN Q 6 7 0 1 McCarthy, Mr. Timothy J male 54.0 0 0 17463 51.8625 E46 S 7 8 0 3 Palsson, Master. Gosta Leonard male 2.0 3 1 349909 21.0750 NaN S 8 9 1 3 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) female 27.0 0 2 347742 11.1333 NaN S 9 10 1 2 Nasser, Mrs. Nicholas (Adele Achem) female 14.0 1 0 237736 30.0708 NaN C titanic . shape (891, 12) titanic . columns Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], dtype='object') titanic . index RangeIndex(start=0, stop=891, step=1)","title":"Load data"},{"location":"DataFrame/dataframe/#preliminary-satatistics","text":"titanic . describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Age SibSp Parch Fare count 891.000000 891.000000 891.000000 714.000000 891.000000 891.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 0.381594 32.204208 std 257.353842 0.486592 0.836071 14.526497 1.102743 0.806057 49.693429 min 1.000000 0.000000 1.000000 0.420000 0.000000 0.000000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 0.000000 7.910400 50% 446.000000 0.000000 3.000000 28.000000 0.000000 0.000000 14.454200 75% 668.500000 1.000000 3.000000 38.000000 1.000000 0.000000 31.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 6.000000 512.329200","title":"Preliminary Satatistics"},{"location":"DataFrame/dataframe/#setting-name-column-as-index","text":"titanic_df1 = titanic . copy(deep = True ) titanic_df1 = titanic . set_index( 'Name' ) titanic_df1 . head( 2 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C","title":"Setting Name column as index"},{"location":"DataFrame/dataframe/#dataframe-creation-numpy-array","text":"","title":"DataFrame Creation (Numpy Array)"},{"location":"DataFrame/dataframe/#from-numpy-array-dataframe","text":"import random as random A = np . random . rand( 100 , 20 ) A . shape (100, 20) letter = [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'X' ] col_names = [ random . choice(letter)\\ + random . choice(letter)\\ + random . choice(letter)\\ + random . choice(letter) for i in range (A . shape[ 1 ])] col_names ['BHBE', 'FCEX', 'HCDC', 'BABH', 'DHCC', 'BEAH', 'CGCA', 'CBFF', 'GDBX', 'GDBD', 'GCXG', 'EBAF', 'FHFC', 'ADXF', 'XGDB', 'FDCB', 'BGGD', 'CXXC', 'GBDE', 'HGXX'] df = pd . DataFrame(A, columns = col_names ) df . to_csv( 'data/test.csv' ) df . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } BHBE FCEX HCDC BABH DHCC BEAH CGCA CBFF GDBX GDBD GCXG EBAF FHFC ADXF XGDB FDCB BGGD CXXC GBDE HGXX 0 0.505613 0.863802 0.064671 0.044665 0.661631 0.010504 0.441470 0.749321 0.389375 0.468762 0.061095 0.779629 0.262696 0.834874 0.762955 0.464253 0.762709 0.425008 0.131542 0.791414 1 0.722504 0.465511 0.555621 0.843348 0.987537 0.955876 0.788946 0.461034 0.278317 0.269186 0.616559 0.095630 0.552730 0.531865 0.056233 0.796237 0.705609 0.683914 0.168146 0.312616 2 0.577487 0.355478 0.939323 0.547315 0.158492 0.226048 0.941994 0.025595 0.291006 0.549547 0.157811 0.358243 0.297590 0.767994 0.804289 0.349676 0.786392 0.806113 0.386147 0.766741 3 0.612300 0.610556 0.141520 0.657244 0.694400 0.555290 0.912868 0.350494 0.203160 0.703884 0.873016 0.420604 0.361509 0.380023 0.819483 0.988239 0.455447 0.732307 0.063254 0.123586 4 0.476368 0.890201 0.923328 0.931688 0.481882 0.411059 0.540152 0.831890 0.737365 0.681351 0.620813 0.018067 0.794526 0.491711 0.116032 0.096085 0.086113 0.813632 0.828594 0.063989","title":"From Numpy array =&gt; Dataframe"},{"location":"DataFrame/dataframe/#data-frame-numpy-array","text":"","title":"Data Frame =&gt; Numpy Array"},{"location":"DataFrame/dataframe/#data-frame-list-of-dictionary","text":"LD = [] for i in range ( 100 ): LD . append({ 'Player' : random . choice(letter) + random . choice(letter) + random . choice(letter) + random . choice(letter),\\ 'game1' : random . uniform( 0 , 1 ),\\ 'game2' : random . uniform( 0 , 1 ),\\ 'game3' : random . uniform( 0 , 1 ), 'game4' : random . uniform( 0 , 1 ), 'game5' : random . uniform( 0 , 1 )}) DF = pd . DataFrame(LD) DF . head( 10 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Player game1 game2 game3 game4 game5 0 CGHX 0.222859 0.370064 0.966385 0.350200 0.294583 1 FFHX 0.390963 0.339934 0.614410 0.251014 0.132956 2 BACC 0.143930 0.217735 0.117256 0.999636 0.566992 3 BCGH 0.499326 0.749363 0.457431 0.087111 0.385008 4 HBCH 0.944682 0.199605 0.372076 0.745106 0.278212 5 DAEE 0.491847 0.137834 0.517073 0.175743 0.289975 6 DCBA 0.747629 0.920831 0.151625 0.168380 0.153710 7 FGBB 0.964832 0.963819 0.465629 0.928988 0.448380 8 EHBF 0.727150 0.743628 0.510928 0.363017 0.856924 9 CXDB 0.448294 0.261936 0.147476 0.539172 0.736563 DF = DF . set_index( 'Player' ) DF . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } game1 game2 game3 game4 game5 Player CGBG 0.030258 0.018657 0.932341 0.586397 0.089513 DXHD 0.759187 0.309100 0.862211 0.094455 0.169772 FDHF 0.058685 0.568902 0.405327 0.592841 0.244399 CGCE 0.130951 0.806490 0.185252 0.341298 0.262757 XHAC 0.433210 0.658711 0.680462 0.682604 0.179386","title":"Data Frame (List of Dictionary)"},{"location":"DataFrame/dataframe/#data-view","text":"DF . plot(figsize = [ 18 , 10 ]) <matplotlib.axes._subplots.AxesSubplot at 0x1a19fd8860> DF[ 0 : 50 ] . plot . bar(stacked = True ,figsize = ( 20 , 15 ),fontsize = 10 ) <matplotlib.axes._subplots.AxesSubplot at 0x107cd7198> DF[ 0 : 10 ] . plot . bar(stacked = False ,figsize = ( 20 , 15 ),fontsize = 10 ) <matplotlib.axes._subplots.AxesSubplot at 0x1a1a0b9cf8> from pandas.plotting import scatter_matrix scatter_matrix(DF, alpha = 0.2 , figsize = ( 18 , 15 ), diagonal = 'kde' ) plt . show() DF . plot . hexbin(x = 'game1' , y = 'game2' ,figsize = ( 12 , 10 ), gridsize = 25 ) <matplotlib.axes._subplots.AxesSubplot at 0x1a242a7550> A = np . array([ 1 , 2 , 3 , 4 , 5 ]) type (A) numpy.ndarray A * 2 array([ 2, 4, 6, 8, 10])","title":"Data View"},{"location":"Explor/explor/","text":"Data Exploration With Pandas import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline sns . set() Load data titanic = pd . read_csv( 'data/titanic.csv' ) Setting Name column as index titanic_df1 = titanic . copy(deep = True ) titanic_df1 = titanic . set_index( 'Name' ) titanic_df1 . head( 2 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C Data Exploration: Titanic Dataset titanic_df1 . describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Age SibSp Parch Fare count 891.000000 891.000000 891.000000 714.000000 891.000000 891.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 0.381594 32.204208 std 257.353842 0.486592 0.836071 14.526497 1.102743 0.806057 49.693429 min 1.000000 0.000000 1.000000 0.420000 0.000000 0.000000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 0.000000 7.910400 50% 446.000000 0.000000 3.000000 28.000000 0.000000 0.000000 14.454200 75% 668.500000 1.000000 3.000000 38.000000 1.000000 0.000000 31.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 6.000000 512.329200 plt . figure(figsize = [ 15 , 15 ]) plt . subplot( 2 , 2 , 1 ) plt . xlabel( 'Sex' ) titanic_df1[ 'Sex' ] . hist() plt . subplot( 2 , 2 , 2 ) plt . xlabel( 'Age' ) titanic_df1[ 'Age' ] . hist(bins = 50 ) plt . subplot( 2 , 2 , 3 ) plt . xlabel( 'Fare' ) titanic_df1[ 'Fare' ] . hist(bins = 50 ) plt . subplot( 2 , 2 , 4 ) plt . xlabel( 'Age' ) plt . ylabel( 'Fare' ) plt . scatter(titanic_df1[ 'Age' ],titanic_df1[ 'Fare' ]) plt . show() Data Exploration with Charity Dataset charitydf = pd . read_csv( 'data/charity.csv' ) charitydf . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age workclass education_level education-num marital-status occupation relationship race sex capital-gain capital-loss hours-per-week native-country income 0 39 State-gov Bachelors 13.0 Never-married Adm-clerical Not-in-family White Male 2174.0 0.0 40.0 United-States <=50K 1 50 Self-emp-not-inc Bachelors 13.0 Married-civ-spouse Exec-managerial Husband White Male 0.0 0.0 13.0 United-States <=50K 2 38 Private HS-grad 9.0 Divorced Handlers-cleaners Not-in-family White Male 0.0 0.0 40.0 United-States <=50K 3 53 Private 11th 7.0 Married-civ-spouse Handlers-cleaners Husband Black Male 0.0 0.0 40.0 United-States <=50K 4 28 Private Bachelors 13.0 Married-civ-spouse Prof-specialty Wife Black Female 0.0 0.0 40.0 Cuba <=50K charitydf . describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age education-num capital-gain capital-loss hours-per-week count 45222.000000 45222.000000 45222.000000 45222.000000 45222.000000 mean 38.547941 10.118460 1101.430344 88.595418 40.938017 std 13.217870 2.552881 7506.430084 404.956092 12.007508 min 17.000000 1.000000 0.000000 0.000000 1.000000 25% 28.000000 9.000000 0.000000 0.000000 40.000000 50% 37.000000 10.000000 0.000000 0.000000 40.000000 75% 47.000000 13.000000 0.000000 0.000000 45.000000 max 90.000000 16.000000 99999.000000 4356.000000 99.000000 charitydf . info() <class 'pandas.core.frame.DataFrame'> RangeIndex: 45222 entries, 0 to 45221 Data columns (total 14 columns): age 45222 non-null int64 workclass 45222 non-null object education_level 45222 non-null object education-num 45222 non-null float64 marital-status 45222 non-null object occupation 45222 non-null object relationship 45222 non-null object race 45222 non-null object sex 45222 non-null object capital-gain 45222 non-null float64 capital-loss 45222 non-null float64 hours-per-week 45222 non-null float64 native-country 45222 non-null object income 45222 non-null object dtypes: float64(4), int64(1), object(9) memory usage: 4.8+ MB import matplotlib.pyplot as plt plt . figure(figsize = ( 14 , 10 )) plt . subplot( 2 , 3 , 1 ) plt . title( \"distribution of age\" ) charitydf[ 'age' ] . hist(bins = 100 ) plt . subplot( 2 , 3 , 2 ) plt . title( \"distribution of education-num\" ) charitydf[ 'education-num' ] . hist(bins = 40 ) plt . subplot( 2 , 3 , 3 ) plt . title( \"distribution of capital-gain\" ) charitydf[ 'capital-gain' ] . hist(bins = 100 ) plt . subplot( 2 , 3 , 4 ) plt . title( \"distribution of hours-per-week\" ) charitydf[ 'hours-per-week' ] . hist(bins = 50 ) plt . subplot( 2 , 3 , 5 ) plt . title( \"distribution of capital-loss\" ) charitydf[ 'capital-loss' ] . hist(bins = 50 ) plt . show() <matplotlib.axes._subplots.AxesSubplot at 0x7efd84af9358> plt . figure(figsize = ( 16 , 21 )) sns . set() sns . pairplot(charitydf, hue = \"income\" ) <seaborn.axisgrid.PairGrid at 0x7efd84b28ba8> <matplotlib.figure.Figure at 0x7efd84b197b8> sns . countplot(y = \"marital-status\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" ); plt . figure(figsize = ( 16 , 21 )) sns . set(style = \"whitegrid\" , color_codes = True ) sns . factorplot( \"sex\" , col = \"marital-status\" , data = charitydf, hue = 'income' , kind = \"count\" , col_wrap = 2 ); <matplotlib.figure.Figure at 0x7efd860fd9b0> plt . figure(figsize = ( 15 , 21 )) plt . subplot( 1 , 2 , 1 ) sns . countplot(y = \"age\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" ); plt . subplot( 1 , 2 , 2 ) sns . countplot(y = \"hours-per-week\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" ); plt . figure(figsize = ( 15 , 21 )) sns . jointplot(x = \"age\" , y = \"hours-per-week\" , data = charitydf,size = 15 ,kind = 'reg' ); <matplotlib.figure.Figure at 0x7efd7ee362b0> plt . figure(figsize = ( 10 , 10 )) sns . barplot(x = \"education-num\" , y = \"education_level\" , data = charitydf); plt . figure(figsize = ( 16 , 16 )) plt . subplot( 1 , 2 , 1 ) sns . countplot(y = \"education-num\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" ); plt . subplot( 1 , 2 , 2 ) sns . countplot(y = \"education_level\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" );","title":"Data Exploration"},{"location":"Explor/explor/#data-exploration-with-pandas","text":"import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline sns . set()","title":"Data Exploration With Pandas"},{"location":"Explor/explor/#load-data","text":"titanic = pd . read_csv( 'data/titanic.csv' )","title":"Load data"},{"location":"Explor/explor/#setting-name-column-as-index","text":"titanic_df1 = titanic . copy(deep = True ) titanic_df1 = titanic . set_index( 'Name' ) titanic_df1 . head( 2 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C","title":"Setting Name column as index"},{"location":"Explor/explor/#data-exploration-titanic-dataset","text":"titanic_df1 . describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Age SibSp Parch Fare count 891.000000 891.000000 891.000000 714.000000 891.000000 891.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 0.381594 32.204208 std 257.353842 0.486592 0.836071 14.526497 1.102743 0.806057 49.693429 min 1.000000 0.000000 1.000000 0.420000 0.000000 0.000000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 0.000000 7.910400 50% 446.000000 0.000000 3.000000 28.000000 0.000000 0.000000 14.454200 75% 668.500000 1.000000 3.000000 38.000000 1.000000 0.000000 31.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 6.000000 512.329200 plt . figure(figsize = [ 15 , 15 ]) plt . subplot( 2 , 2 , 1 ) plt . xlabel( 'Sex' ) titanic_df1[ 'Sex' ] . hist() plt . subplot( 2 , 2 , 2 ) plt . xlabel( 'Age' ) titanic_df1[ 'Age' ] . hist(bins = 50 ) plt . subplot( 2 , 2 , 3 ) plt . xlabel( 'Fare' ) titanic_df1[ 'Fare' ] . hist(bins = 50 ) plt . subplot( 2 , 2 , 4 ) plt . xlabel( 'Age' ) plt . ylabel( 'Fare' ) plt . scatter(titanic_df1[ 'Age' ],titanic_df1[ 'Fare' ]) plt . show()","title":"Data Exploration: Titanic Dataset"},{"location":"Explor/explor/#data-exploration-with-charity-dataset","text":"charitydf = pd . read_csv( 'data/charity.csv' ) charitydf . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age workclass education_level education-num marital-status occupation relationship race sex capital-gain capital-loss hours-per-week native-country income 0 39 State-gov Bachelors 13.0 Never-married Adm-clerical Not-in-family White Male 2174.0 0.0 40.0 United-States <=50K 1 50 Self-emp-not-inc Bachelors 13.0 Married-civ-spouse Exec-managerial Husband White Male 0.0 0.0 13.0 United-States <=50K 2 38 Private HS-grad 9.0 Divorced Handlers-cleaners Not-in-family White Male 0.0 0.0 40.0 United-States <=50K 3 53 Private 11th 7.0 Married-civ-spouse Handlers-cleaners Husband Black Male 0.0 0.0 40.0 United-States <=50K 4 28 Private Bachelors 13.0 Married-civ-spouse Prof-specialty Wife Black Female 0.0 0.0 40.0 Cuba <=50K charitydf . describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } age education-num capital-gain capital-loss hours-per-week count 45222.000000 45222.000000 45222.000000 45222.000000 45222.000000 mean 38.547941 10.118460 1101.430344 88.595418 40.938017 std 13.217870 2.552881 7506.430084 404.956092 12.007508 min 17.000000 1.000000 0.000000 0.000000 1.000000 25% 28.000000 9.000000 0.000000 0.000000 40.000000 50% 37.000000 10.000000 0.000000 0.000000 40.000000 75% 47.000000 13.000000 0.000000 0.000000 45.000000 max 90.000000 16.000000 99999.000000 4356.000000 99.000000 charitydf . info() <class 'pandas.core.frame.DataFrame'> RangeIndex: 45222 entries, 0 to 45221 Data columns (total 14 columns): age 45222 non-null int64 workclass 45222 non-null object education_level 45222 non-null object education-num 45222 non-null float64 marital-status 45222 non-null object occupation 45222 non-null object relationship 45222 non-null object race 45222 non-null object sex 45222 non-null object capital-gain 45222 non-null float64 capital-loss 45222 non-null float64 hours-per-week 45222 non-null float64 native-country 45222 non-null object income 45222 non-null object dtypes: float64(4), int64(1), object(9) memory usage: 4.8+ MB import matplotlib.pyplot as plt plt . figure(figsize = ( 14 , 10 )) plt . subplot( 2 , 3 , 1 ) plt . title( \"distribution of age\" ) charitydf[ 'age' ] . hist(bins = 100 ) plt . subplot( 2 , 3 , 2 ) plt . title( \"distribution of education-num\" ) charitydf[ 'education-num' ] . hist(bins = 40 ) plt . subplot( 2 , 3 , 3 ) plt . title( \"distribution of capital-gain\" ) charitydf[ 'capital-gain' ] . hist(bins = 100 ) plt . subplot( 2 , 3 , 4 ) plt . title( \"distribution of hours-per-week\" ) charitydf[ 'hours-per-week' ] . hist(bins = 50 ) plt . subplot( 2 , 3 , 5 ) plt . title( \"distribution of capital-loss\" ) charitydf[ 'capital-loss' ] . hist(bins = 50 ) plt . show() <matplotlib.axes._subplots.AxesSubplot at 0x7efd84af9358> plt . figure(figsize = ( 16 , 21 )) sns . set() sns . pairplot(charitydf, hue = \"income\" ) <seaborn.axisgrid.PairGrid at 0x7efd84b28ba8> <matplotlib.figure.Figure at 0x7efd84b197b8> sns . countplot(y = \"marital-status\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" ); plt . figure(figsize = ( 16 , 21 )) sns . set(style = \"whitegrid\" , color_codes = True ) sns . factorplot( \"sex\" , col = \"marital-status\" , data = charitydf, hue = 'income' , kind = \"count\" , col_wrap = 2 ); <matplotlib.figure.Figure at 0x7efd860fd9b0> plt . figure(figsize = ( 15 , 21 )) plt . subplot( 1 , 2 , 1 ) sns . countplot(y = \"age\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" ); plt . subplot( 1 , 2 , 2 ) sns . countplot(y = \"hours-per-week\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" ); plt . figure(figsize = ( 15 , 21 )) sns . jointplot(x = \"age\" , y = \"hours-per-week\" , data = charitydf,size = 15 ,kind = 'reg' ); <matplotlib.figure.Figure at 0x7efd7ee362b0> plt . figure(figsize = ( 10 , 10 )) sns . barplot(x = \"education-num\" , y = \"education_level\" , data = charitydf); plt . figure(figsize = ( 16 , 16 )) plt . subplot( 1 , 2 , 1 ) sns . countplot(y = \"education-num\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" ); plt . subplot( 1 , 2 , 2 ) sns . countplot(y = \"education_level\" , hue = \"income\" , data = charitydf, palette = \"Greens_d\" );","title":"Data Exploration with Charity Dataset"},{"location":"GroupBy/groupby/","text":"Data Handeling: Groupby, Merge, Split import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline sns . set() Load data titanic = pd . read_csv( 'data/titanic.csv' ) Setting Name column as index titanic_df1 = titanic . copy(deep = True ) titanic_df1 = titanic . set_index( 'Name' ) titanic_df1 . head( 2 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C Group By : groupby.aggregate() , groupby.size() , groupby.mean() , The groupby operation (split-apply-combine) The \"group by\" concept: we want to apply the same function on subsets of your dataframe, based on some key to split the dataframe in subsets This operation is also referred to as the \"split-apply-combine\" operation, involving the following steps: Splitting the data into groups based on some criteria Applying a function to each group independently Combining the results into a data structure df = pd . DataFrame({ 'key' :[ 'A' , 'B' , 'C' , 'A' , 'B' , 'C' , 'A' , 'B' , 'C' ], 'data' : [ 0 , 5 , 10 , 5 , 10 , 15 , 10 , 15 , 20 ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key data 0 A 0 1 B 5 2 C 10 3 A 5 4 B 10 5 C 15 6 A 10 7 B 15 8 C 20 df . groupby( 'key' ) . aggregate(np . sum) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data key A 15 B 30 C 45 Exercise with Titanic Dataset titanic_df1 . groupby( 'Sex' ) . size() Sex female 314 male 577 dtype: int64 EXERCISE : Using groupby(), calculate the average age for each sex. titanic_df1 . groupby( 'Sex' )[ 'Age' ] . mean() Sex female 27.915709 male 30.726645 Name: Age, dtype: float64 EXERCISE : Calculate the average survival ratio for all passengers. titanic_df1[ 'Survived' ] . sum() / len (titanic_df1[ 'Survived' ]) 0.3838383838383838 EXERCISE : Calculate this survival ratio for all passengers younger that 25 (remember: filtering/boolean indexing). df25 = titanic_df1[titanic_df1[ 'Age' ] <= 25 ] df25[ 'Survived' ] . sum() / len (df25[ 'Survived' ]) 0.4119601328903654 EXERCISE : Is there a difference in this survival ratio between the sexes? (tip: write the above calculation of the survival ratio as a function) def survival_ratio (survived): return survived . sum() / len (survived) titanic_df1 . groupby( 'Sex' )[ 'Survived' ] . aggregate(survival_ratio) Sex female 0.742038 male 0.188908 Name: Survived, dtype: float64 EXERCISE : Make a bar plot of the survival ratio for the different classes ('Pclass' column). titanic_df1 . groupby( 'Pclass' )[ 'Survived' ] . aggregate(survival_ratio) . plot(kind = 'bar' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fb321d163c8> Advanced Groupby Operations EXERCISE : Find data for age distribution. type ( 10 // 2 ) int df = titanic_df1 . copy(deep = True ) df . groupby(df . Age // 10 * 10 ) . size() . plot(kind = 'bar' ,figsize = [ 10 , 10 ]) <matplotlib.axes._subplots.AxesSubplot at 0x7fb31d63f2b0> EXERCISE : Find data for male age distribution. Male = df[df[ 'Sex' ] == 'male' ] Male . groupby(Male . Age // 10 * 10 ) . size() . plot(kind = 'bar' ,figsize = [ 10 , 10 ]) <matplotlib.axes._subplots.AxesSubplot at 0x7fb31d524dd8> EXERCISE : List data with Fare size greater then 50. Fare50 = df[df . Fare > 50 ] Fare50 . groupby([ 'Sex' ]) . size() Sex female 87 male 73 dtype: int64 Fare50 . groupby([ 'Age' , 'Sex' , 'Survived' ]) . size() Age Sex Survived 0.92 male 1 1 2.00 female 0 1 4.00 male 1 1 11.00 male 1 1 14.00 female 1 1 15.00 female 1 1 16.00 female 1 2 17.00 female 1 2 male 1 1 18.00 female 1 3 male 0 2 19.00 female 1 1 male 0 2 21.00 female 1 2 male 0 3 22.00 female 1 3 male 0 1 23.00 female 1 2 male 1 1 24.00 female 1 5 male 0 3 25.00 female 0 1 male 1 2 26.00 female 1 1 male 1 1 27.00 male 0 1 1 2 28.00 male 0 2 29.00 female 1 1 male 0 1 .. 45.00 female 1 1 male 0 1 46.00 male 0 2 47.00 female 1 1 male 0 1 48.00 female 1 1 male 1 2 49.00 female 1 1 male 0 1 1 2 50.00 female 1 1 male 0 2 1 1 51.00 female 1 1 male 0 1 52.00 female 1 2 male 0 1 53.00 female 1 1 54.00 female 1 2 male 0 2 56.00 female 1 1 58.00 female 1 2 male 0 1 60.00 female 1 1 male 1 1 62.00 female 1 1 63.00 female 1 1 64.00 male 0 1 65.00 male 0 1 70.00 male 0 1 Length: 87, dtype: int64 Group by followed by Transformation: groupby.transform() df = pd . DataFrame({ 'key' :[ 'A' , 'B' , 'C' , 'A' , 'B' , 'C' , 'A' , 'B' , 'C' ], 'data' : [ 0 , 5 , 10 , 5 , 10 , 15 , 10 , 15 , 20 ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data key 0 0 A 1 5 B 2 10 C 3 5 A 4 10 B 5 15 C 6 10 A 7 15 B 8 20 C df . groupby( 'key' ) . transform( 'mean' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data 0 5 1 10 2 15 3 5 4 10 5 15 6 5 7 10 8 15 def normalize (group): return (group - group . mean()) / group . std() df . groupby( 'key' ) . transform(normalize) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data 0 -1.0 1 -1.0 2 -1.0 3 0.0 4 0.0 5 0.0 6 1.0 7 1.0 8 1.0 df . groupby( 'key' ) . transform( 'sum' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data 0 15 1 30 2 45 3 15 4 30 5 45 6 15 7 30 8 45","title":"GroupBy"},{"location":"GroupBy/groupby/#data-handeling-groupby-merge-split","text":"import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline sns . set()","title":"Data Handeling: Groupby, Merge, Split"},{"location":"GroupBy/groupby/#load-data","text":"titanic = pd . read_csv( 'data/titanic.csv' )","title":"Load data"},{"location":"GroupBy/groupby/#setting-name-column-as-index","text":"titanic_df1 = titanic . copy(deep = True ) titanic_df1 = titanic . set_index( 'Name' ) titanic_df1 . head( 2 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C","title":"Setting Name column as index"},{"location":"GroupBy/groupby/#group-by-groupbyaggregate-groupbysizegroupbymean","text":"","title":"Group By : groupby.aggregate(), groupby.size(),groupby.mean(),"},{"location":"GroupBy/groupby/#the-groupby-operation-split-apply-combine","text":"The \"group by\" concept: we want to apply the same function on subsets of your dataframe, based on some key to split the dataframe in subsets This operation is also referred to as the \"split-apply-combine\" operation, involving the following steps: Splitting the data into groups based on some criteria Applying a function to each group independently Combining the results into a data structure df = pd . DataFrame({ 'key' :[ 'A' , 'B' , 'C' , 'A' , 'B' , 'C' , 'A' , 'B' , 'C' ], 'data' : [ 0 , 5 , 10 , 5 , 10 , 15 , 10 , 15 , 20 ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key data 0 A 0 1 B 5 2 C 10 3 A 5 4 B 10 5 C 15 6 A 10 7 B 15 8 C 20 df . groupby( 'key' ) . aggregate(np . sum) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data key A 15 B 30 C 45","title":"The groupby operation (split-apply-combine)"},{"location":"GroupBy/groupby/#exercise-with-titanic-dataset","text":"titanic_df1 . groupby( 'Sex' ) . size() Sex female 314 male 577 dtype: int64 EXERCISE : Using groupby(), calculate the average age for each sex. titanic_df1 . groupby( 'Sex' )[ 'Age' ] . mean() Sex female 27.915709 male 30.726645 Name: Age, dtype: float64 EXERCISE : Calculate the average survival ratio for all passengers. titanic_df1[ 'Survived' ] . sum() / len (titanic_df1[ 'Survived' ]) 0.3838383838383838 EXERCISE : Calculate this survival ratio for all passengers younger that 25 (remember: filtering/boolean indexing). df25 = titanic_df1[titanic_df1[ 'Age' ] <= 25 ] df25[ 'Survived' ] . sum() / len (df25[ 'Survived' ]) 0.4119601328903654 EXERCISE : Is there a difference in this survival ratio between the sexes? (tip: write the above calculation of the survival ratio as a function) def survival_ratio (survived): return survived . sum() / len (survived) titanic_df1 . groupby( 'Sex' )[ 'Survived' ] . aggregate(survival_ratio) Sex female 0.742038 male 0.188908 Name: Survived, dtype: float64 EXERCISE : Make a bar plot of the survival ratio for the different classes ('Pclass' column). titanic_df1 . groupby( 'Pclass' )[ 'Survived' ] . aggregate(survival_ratio) . plot(kind = 'bar' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fb321d163c8>","title":"Exercise with Titanic Dataset"},{"location":"GroupBy/groupby/#advanced-groupby-operations","text":"EXERCISE : Find data for age distribution. type ( 10 // 2 ) int df = titanic_df1 . copy(deep = True ) df . groupby(df . Age // 10 * 10 ) . size() . plot(kind = 'bar' ,figsize = [ 10 , 10 ]) <matplotlib.axes._subplots.AxesSubplot at 0x7fb31d63f2b0> EXERCISE : Find data for male age distribution. Male = df[df[ 'Sex' ] == 'male' ] Male . groupby(Male . Age // 10 * 10 ) . size() . plot(kind = 'bar' ,figsize = [ 10 , 10 ]) <matplotlib.axes._subplots.AxesSubplot at 0x7fb31d524dd8> EXERCISE : List data with Fare size greater then 50. Fare50 = df[df . Fare > 50 ] Fare50 . groupby([ 'Sex' ]) . size() Sex female 87 male 73 dtype: int64 Fare50 . groupby([ 'Age' , 'Sex' , 'Survived' ]) . size() Age Sex Survived 0.92 male 1 1 2.00 female 0 1 4.00 male 1 1 11.00 male 1 1 14.00 female 1 1 15.00 female 1 1 16.00 female 1 2 17.00 female 1 2 male 1 1 18.00 female 1 3 male 0 2 19.00 female 1 1 male 0 2 21.00 female 1 2 male 0 3 22.00 female 1 3 male 0 1 23.00 female 1 2 male 1 1 24.00 female 1 5 male 0 3 25.00 female 0 1 male 1 2 26.00 female 1 1 male 1 1 27.00 male 0 1 1 2 28.00 male 0 2 29.00 female 1 1 male 0 1 .. 45.00 female 1 1 male 0 1 46.00 male 0 2 47.00 female 1 1 male 0 1 48.00 female 1 1 male 1 2 49.00 female 1 1 male 0 1 1 2 50.00 female 1 1 male 0 2 1 1 51.00 female 1 1 male 0 1 52.00 female 1 2 male 0 1 53.00 female 1 1 54.00 female 1 2 male 0 2 56.00 female 1 1 58.00 female 1 2 male 0 1 60.00 female 1 1 male 1 1 62.00 female 1 1 63.00 female 1 1 64.00 male 0 1 65.00 male 0 1 70.00 male 0 1 Length: 87, dtype: int64","title":"Advanced Groupby Operations"},{"location":"GroupBy/groupby/#group-by-followed-by-transformation-groupbytransform","text":"df = pd . DataFrame({ 'key' :[ 'A' , 'B' , 'C' , 'A' , 'B' , 'C' , 'A' , 'B' , 'C' ], 'data' : [ 0 , 5 , 10 , 5 , 10 , 15 , 10 , 15 , 20 ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data key 0 0 A 1 5 B 2 10 C 3 5 A 4 10 B 5 15 C 6 10 A 7 15 B 8 20 C df . groupby( 'key' ) . transform( 'mean' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data 0 5 1 10 2 15 3 5 4 10 5 15 6 5 7 10 8 15 def normalize (group): return (group - group . mean()) / group . std() df . groupby( 'key' ) . transform(normalize) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data 0 -1.0 1 -1.0 2 -1.0 3 0.0 4 0.0 5 0.0 6 1.0 7 1.0 8 1.0 df . groupby( 'key' ) . transform( 'sum' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } data 0 15 1 30 2 45 3 15 4 30 5 45 6 15 7 30 8 45","title":"Group by followed by Transformation: groupby.transform()"},{"location":"Indexing/Indexing/","text":"Data Iteration and Indexing import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline titanic = pd . read_csv( 'data/titanic.csv' ) titanic . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S Setting Name column as index titanic_df1 = titanic . copy(deep = True ) titanic_df1 = titanic . set_index( 'Name' ) titanic_df1 . head( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C Heikkinen, Miss. Laina 3 1 3 female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S Futrelle, Mrs. Jacques Heath (Lily May Peel) 4 1 1 female 35.0 1 0 113803 53.1000 C123 S Allen, Mr. William Henry 5 0 3 male 35.0 0 0 373450 8.0500 NaN S Data Frame item iteration sample = titanic_df1[ 0 : 5 ] iterrows for index,row in sample . iterrows(): print (index, list (row)) Braund, Mr. Owen Harris [1, 0, 3, 'male', 22.0, 1, 0, 'A/5 21171', 7.25, nan, 'S'] Cumings, Mrs. John Bradley (Florence Briggs Thayer) [2, 1, 1, 'female', 38.0, 1, 0, 'PC 17599', 71.2833, 'C85', 'C'] Heikkinen, Miss. Laina [3, 1, 3, 'female', 26.0, 0, 0, 'STON/O2. 3101282', 7.925, nan, 'S'] Futrelle, Mrs. Jacques Heath (Lily May Peel) [4, 1, 1, 'female', 35.0, 1, 0, '113803', 53.1, 'C123', 'S'] Allen, Mr. William Henry [5, 0, 3, 'male', 35.0, 0, 0, '373450', 8.05, nan, 'S'] for index,row in sample . iterrows(): print (index,row[ 'Sex' ],row[ 'Age' ]) Braund, Mr. Owen Harris male 22.0 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38.0 Heikkinen, Miss. Laina female 26.0 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 Allen, Mr. William Henry male 35.0 iteritems for index,row in sample . T . iteritems(): print (index, list (row)) Braund, Mr. Owen Harris [1, 0, 3, 'male', 22.0, 1, 0, 'A/5 21171', 7.25, nan, 'S'] Cumings, Mrs. John Bradley (Florence Briggs Thayer) [2, 1, 1, 'female', 38.0, 1, 0, 'PC 17599', 71.2833, 'C85', 'C'] Heikkinen, Miss. Laina [3, 1, 3, 'female', 26.0, 0, 0, 'STON/O2. 3101282', 7.925, nan, 'S'] Futrelle, Mrs. Jacques Heath (Lily May Peel) [4, 1, 1, 'female', 35.0, 1, 0, '113803', 53.1, 'C123', 'S'] Allen, Mr. William Henry [5, 0, 3, 'male', 35.0, 0, 0, '373450', 8.05, nan, 'S'] for index,row in sample . iteritems(): print (index,row[ 0 ],row[ 1 ],row[ 2 ]) PassengerId 1 2 3 Survived 0 1 1 Pclass 3 1 3 Sex male female female Age 22.0 38.0 26.0 SibSp 1 1 0 Parch 0 0 0 Ticket A/5 21171 PC 17599 STON/O2. 3101282 Fare 7.25 71.2833 7.925 Cabin nan C85 nan Embarked S C S Indexing Data Source: Using iloc, loc, & ix to select rows and columns in Pandas DataFrames loc and iloc : The iloc indexer for Pandas Dataframe is used for integer-location based indexing / selection by position. The Pandas loc indexer can be used with DataFrames for two different use cases: a.) Selecting rows by label/index b.) Selecting rows with a boolean / conditional lookup sample . iloc[ 0 : 2 ,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C sample . iloc[ 1 , 0 : 3 ] PassengerId 2 Survived 1 Pclass 1 Name: Cumings, Mrs. John Bradley (Florence Briggs Thayer), dtype: object sample . loc[:, 'Survived' : 'Ticket' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Survived Pclass Sex Age SibSp Parch Ticket Name Braund, Mr. Owen Harris 0 3 male 22.0 1 0 A/5 21171 Cumings, Mrs. John Bradley (Florence Briggs Thayer) 1 1 female 38.0 1 0 PC 17599 Heikkinen, Miss. Laina 1 3 female 26.0 0 0 STON/O2. 3101282 Futrelle, Mrs. Jacques Heath (Lily May Peel) 1 1 female 35.0 1 0 113803 Allen, Mr. William Henry 0 3 male 35.0 0 0 373450 sample . loc[ 'Braund, Mr. Owen Harris' ,:] PassengerId 1 Survived 0 Pclass 3 Sex male Age 22 SibSp 1 Parch 0 Ticket A/5 21171 Fare 7.25 Cabin NaN Embarked S Name: Braund, Mr. Owen Harris, dtype: object Data Filters Dictionary to DataFrame data = { 'country' : [ 'Belgium' , 'France' , 'Germany' , 'Netherlands' , 'United Kingdom' ], 'population' : [ 11.3 , 64.3 , 81.3 , 16.9 , 64.9 ], 'area' : [ 30510 , 671308 , 357050 , 41526 , 244820 ], 'capital' : [ 'Brussels' , 'Paris' , 'Berlin' , 'Amsterdam' , 'London' ]} countries = pd . DataFrame(data) countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } country population area capital 0 Belgium 11.3 30510 Brussels 1 France 64.3 671308 Paris 2 Germany 81.3 357050 Berlin 3 Netherlands 16.9 41526 Amsterdam 4 United Kingdom 64.9 244820 London countries = countries . set_index( 'country' ) countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital country Belgium 11.3 30510 Brussels France 64.3 671308 Paris Germany 81.3 357050 Berlin Netherlands 16.9 41526 Amsterdam United Kingdom 64.9 244820 London countries[ 'area' ] country Belgium 30510 France 671308 Germany 357050 Netherlands 41526 United Kingdom 244820 Name: area, dtype: int64 countries[[ 'area' , 'population' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } area population country Belgium 30510 11.3 France 671308 64.3 Germany 357050 81.3 Netherlands 41526 16.9 United Kingdom 244820 64.9 countries[ 'France' : 'Netherlands' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital country France 64.3 671308 Paris Germany 81.3 357050 Berlin Netherlands 16.9 41526 Amsterdam countries . loc[ 'Germany' , 'area' ] 357050 countries . loc[ 'France' : 'Germany' , [ 'area' , 'population' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } area population country France 671308 64.3 Germany 357050 81.3 countries . iloc[ 0 : 2 , 1 : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } area capital country Belgium 30510 Brussels France 671308 Paris countries2 = countries . copy() countries2 . loc[ 'Belgium' : 'Germany' , 'population' ] = 10 countries2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital country Belgium 10.0 30510 Brussels France 10.0 671308 Paris Germany 10.0 357050 Berlin Netherlands 16.9 41526 Amsterdam United Kingdom 64.9 244820 London countries[ 'area' ] > 100000 country Belgium False France True Germany True Netherlands False United Kingdom True Name: area, dtype: bool countries[countries[ 'area' ] > 100000 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital country France 64.3 671308 Paris Germany 81.3 357050 Berlin United Kingdom 64.9 244820 London EXERCISE : Add a column `density` with the population density (note: population column is expressed in millions) countries[ 'density' ] = countries[ 'population' ] * 1000000 / countries[ 'area' ] countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital density country Belgium 11.3 30510 Brussels 370.370370 France 64.3 671308 Paris 95.783158 Germany 81.3 357050 Berlin 227.699202 Netherlands 16.9 41526 Amsterdam 406.973944 United Kingdom 64.9 244820 London 265.092721 EXERCISE : Select the capital and the population column of those countries where the density is larger than 300 countries . loc[countries[ 'density' ] > 300 , [ 'capital' , 'population' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } capital population country Belgium Brussels 11.3 Netherlands Amsterdam 16.9 EXERCISE : Add a column 'density_ratio' with the ratio of the density to the mean density countries[ 'density_ratio' ] = countries[ 'density' ] / countries[ 'density' ] . mean() countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital density density_ratio country Belgium 11.3 30510 Brussels 370.370370 1.355755 France 64.3 671308 Paris 95.783158 0.350618 Germany 81.3 357050 Berlin 227.699202 0.833502 Netherlands 16.9 41526 Amsterdam 406.973944 1.489744 United Kingdom 64.9 244820 London 265.092721 0.970382 EXERCISE : Change the capital of the UK to Cambridge countries . loc[ 'United Kingdom' , 'capital' ] = 'Cambridge' countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital density density_ratio country Belgium 11.3 30510 Brussels 370.370370 1.355755 France 64.3 671308 Paris 95.783158 0.350618 Germany 81.3 357050 Berlin 227.699202 0.833502 Netherlands 16.9 41526 Amsterdam 406.973944 1.489744 United Kingdom 64.9 244820 Cambridge 265.092721 0.970382 EXERCISE : Select all countries whose population density is between 100 and 300 people/km\u00b2 countries[(countries[ 'density' ] > 100 ) & (countries[ 'density' ] < 300 )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital density density_ratio country Germany 81.3 357050 Berlin 227.699202 0.833502 United Kingdom 64.9 244820 Cambridge 265.092721 0.970382","title":"Indexing"},{"location":"Indexing/Indexing/#data-iteration-and-indexing","text":"import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline titanic = pd . read_csv( 'data/titanic.csv' ) titanic . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S","title":"Data Iteration and Indexing"},{"location":"Indexing/Indexing/#setting-name-column-as-index","text":"titanic_df1 = titanic . copy(deep = True ) titanic_df1 = titanic . set_index( 'Name' ) titanic_df1 . head( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C Heikkinen, Miss. Laina 3 1 3 female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S Futrelle, Mrs. Jacques Heath (Lily May Peel) 4 1 1 female 35.0 1 0 113803 53.1000 C123 S Allen, Mr. William Henry 5 0 3 male 35.0 0 0 373450 8.0500 NaN S","title":"Setting Name column as index"},{"location":"Indexing/Indexing/#data-frame-item-iteration","text":"sample = titanic_df1[ 0 : 5 ]","title":"Data Frame item iteration"},{"location":"Indexing/Indexing/#iterrows","text":"for index,row in sample . iterrows(): print (index, list (row)) Braund, Mr. Owen Harris [1, 0, 3, 'male', 22.0, 1, 0, 'A/5 21171', 7.25, nan, 'S'] Cumings, Mrs. John Bradley (Florence Briggs Thayer) [2, 1, 1, 'female', 38.0, 1, 0, 'PC 17599', 71.2833, 'C85', 'C'] Heikkinen, Miss. Laina [3, 1, 3, 'female', 26.0, 0, 0, 'STON/O2. 3101282', 7.925, nan, 'S'] Futrelle, Mrs. Jacques Heath (Lily May Peel) [4, 1, 1, 'female', 35.0, 1, 0, '113803', 53.1, 'C123', 'S'] Allen, Mr. William Henry [5, 0, 3, 'male', 35.0, 0, 0, '373450', 8.05, nan, 'S'] for index,row in sample . iterrows(): print (index,row[ 'Sex' ],row[ 'Age' ]) Braund, Mr. Owen Harris male 22.0 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38.0 Heikkinen, Miss. Laina female 26.0 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 Allen, Mr. William Henry male 35.0","title":"iterrows"},{"location":"Indexing/Indexing/#iteritems","text":"for index,row in sample . T . iteritems(): print (index, list (row)) Braund, Mr. Owen Harris [1, 0, 3, 'male', 22.0, 1, 0, 'A/5 21171', 7.25, nan, 'S'] Cumings, Mrs. John Bradley (Florence Briggs Thayer) [2, 1, 1, 'female', 38.0, 1, 0, 'PC 17599', 71.2833, 'C85', 'C'] Heikkinen, Miss. Laina [3, 1, 3, 'female', 26.0, 0, 0, 'STON/O2. 3101282', 7.925, nan, 'S'] Futrelle, Mrs. Jacques Heath (Lily May Peel) [4, 1, 1, 'female', 35.0, 1, 0, '113803', 53.1, 'C123', 'S'] Allen, Mr. William Henry [5, 0, 3, 'male', 35.0, 0, 0, '373450', 8.05, nan, 'S'] for index,row in sample . iteritems(): print (index,row[ 0 ],row[ 1 ],row[ 2 ]) PassengerId 1 2 3 Survived 0 1 1 Pclass 3 1 3 Sex male female female Age 22.0 38.0 26.0 SibSp 1 1 0 Parch 0 0 0 Ticket A/5 21171 PC 17599 STON/O2. 3101282 Fare 7.25 71.2833 7.925 Cabin nan C85 nan Embarked S C S","title":"iteritems"},{"location":"Indexing/Indexing/#indexing-data","text":"Source: Using iloc, loc, & ix to select rows and columns in Pandas DataFrames","title":"Indexing Data"},{"location":"Indexing/Indexing/#loc-and-iloc","text":"The iloc indexer for Pandas Dataframe is used for integer-location based indexing / selection by position. The Pandas loc indexer can be used with DataFrames for two different use cases: a.) Selecting rows by label/index b.) Selecting rows with a boolean / conditional lookup sample . iloc[ 0 : 2 ,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C sample . iloc[ 1 , 0 : 3 ] PassengerId 2 Survived 1 Pclass 1 Name: Cumings, Mrs. John Bradley (Florence Briggs Thayer), dtype: object sample . loc[:, 'Survived' : 'Ticket' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Survived Pclass Sex Age SibSp Parch Ticket Name Braund, Mr. Owen Harris 0 3 male 22.0 1 0 A/5 21171 Cumings, Mrs. John Bradley (Florence Briggs Thayer) 1 1 female 38.0 1 0 PC 17599 Heikkinen, Miss. Laina 1 3 female 26.0 0 0 STON/O2. 3101282 Futrelle, Mrs. Jacques Heath (Lily May Peel) 1 1 female 35.0 1 0 113803 Allen, Mr. William Henry 0 3 male 35.0 0 0 373450 sample . loc[ 'Braund, Mr. Owen Harris' ,:] PassengerId 1 Survived 0 Pclass 3 Sex male Age 22 SibSp 1 Parch 0 Ticket A/5 21171 Fare 7.25 Cabin NaN Embarked S Name: Braund, Mr. Owen Harris, dtype: object","title":"loc and iloc :"},{"location":"Indexing/Indexing/#data-filters","text":"","title":"Data Filters"},{"location":"Indexing/Indexing/#dictionary-to-dataframe","text":"data = { 'country' : [ 'Belgium' , 'France' , 'Germany' , 'Netherlands' , 'United Kingdom' ], 'population' : [ 11.3 , 64.3 , 81.3 , 16.9 , 64.9 ], 'area' : [ 30510 , 671308 , 357050 , 41526 , 244820 ], 'capital' : [ 'Brussels' , 'Paris' , 'Berlin' , 'Amsterdam' , 'London' ]} countries = pd . DataFrame(data) countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } country population area capital 0 Belgium 11.3 30510 Brussels 1 France 64.3 671308 Paris 2 Germany 81.3 357050 Berlin 3 Netherlands 16.9 41526 Amsterdam 4 United Kingdom 64.9 244820 London countries = countries . set_index( 'country' ) countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital country Belgium 11.3 30510 Brussels France 64.3 671308 Paris Germany 81.3 357050 Berlin Netherlands 16.9 41526 Amsterdam United Kingdom 64.9 244820 London countries[ 'area' ] country Belgium 30510 France 671308 Germany 357050 Netherlands 41526 United Kingdom 244820 Name: area, dtype: int64 countries[[ 'area' , 'population' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } area population country Belgium 30510 11.3 France 671308 64.3 Germany 357050 81.3 Netherlands 41526 16.9 United Kingdom 244820 64.9 countries[ 'France' : 'Netherlands' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital country France 64.3 671308 Paris Germany 81.3 357050 Berlin Netherlands 16.9 41526 Amsterdam countries . loc[ 'Germany' , 'area' ] 357050 countries . loc[ 'France' : 'Germany' , [ 'area' , 'population' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } area population country France 671308 64.3 Germany 357050 81.3 countries . iloc[ 0 : 2 , 1 : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } area capital country Belgium 30510 Brussels France 671308 Paris countries2 = countries . copy() countries2 . loc[ 'Belgium' : 'Germany' , 'population' ] = 10 countries2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital country Belgium 10.0 30510 Brussels France 10.0 671308 Paris Germany 10.0 357050 Berlin Netherlands 16.9 41526 Amsterdam United Kingdom 64.9 244820 London countries[ 'area' ] > 100000 country Belgium False France True Germany True Netherlands False United Kingdom True Name: area, dtype: bool countries[countries[ 'area' ] > 100000 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital country France 64.3 671308 Paris Germany 81.3 357050 Berlin United Kingdom 64.9 244820 London EXERCISE : Add a column `density` with the population density (note: population column is expressed in millions) countries[ 'density' ] = countries[ 'population' ] * 1000000 / countries[ 'area' ] countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital density country Belgium 11.3 30510 Brussels 370.370370 France 64.3 671308 Paris 95.783158 Germany 81.3 357050 Berlin 227.699202 Netherlands 16.9 41526 Amsterdam 406.973944 United Kingdom 64.9 244820 London 265.092721 EXERCISE : Select the capital and the population column of those countries where the density is larger than 300 countries . loc[countries[ 'density' ] > 300 , [ 'capital' , 'population' ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } capital population country Belgium Brussels 11.3 Netherlands Amsterdam 16.9 EXERCISE : Add a column 'density_ratio' with the ratio of the density to the mean density countries[ 'density_ratio' ] = countries[ 'density' ] / countries[ 'density' ] . mean() countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital density density_ratio country Belgium 11.3 30510 Brussels 370.370370 1.355755 France 64.3 671308 Paris 95.783158 0.350618 Germany 81.3 357050 Berlin 227.699202 0.833502 Netherlands 16.9 41526 Amsterdam 406.973944 1.489744 United Kingdom 64.9 244820 London 265.092721 0.970382 EXERCISE : Change the capital of the UK to Cambridge countries . loc[ 'United Kingdom' , 'capital' ] = 'Cambridge' countries .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital density density_ratio country Belgium 11.3 30510 Brussels 370.370370 1.355755 France 64.3 671308 Paris 95.783158 0.350618 Germany 81.3 357050 Berlin 227.699202 0.833502 Netherlands 16.9 41526 Amsterdam 406.973944 1.489744 United Kingdom 64.9 244820 Cambridge 265.092721 0.970382 EXERCISE : Select all countries whose population density is between 100 and 300 people/km\u00b2 countries[(countries[ 'density' ] > 100 ) & (countries[ 'density' ] < 300 )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population area capital density density_ratio country Germany 81.3 357050 Berlin 227.699202 0.833502 United Kingdom 64.9 244820 Cambridge 265.092721 0.970382","title":"Dictionary to DataFrame"},{"location":"Lambda/lambda/","text":"Lambda Transformation import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline Load data titanic = pd . read_csv( 'data/titanic.csv' ) Setting Name column as index df1 = titanic . copy(deep = True ) df1 = titanic . set_index( 'Name' ) df1 . head( 2 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C Lambda Transformation df1[ 'Fare' ] . apply( lambda x: ( 10 * x ** 2 + 2 * x + 4 ) / 10 ) Name Braund, Mr. Owen Harris 0.72500 Cumings, Mrs. John Bradley (Florence Briggs Thayer) 7.12833 Heikkinen, Miss. Laina 0.79250 Futrelle, Mrs. Jacques Heath (Lily May Peel) 5.31000 Allen, Mr. William Henry 0.80500 Moran, Mr. James 0.84583 McCarthy, Mr. Timothy J 5.18625 Palsson, Master. Gosta Leonard 2.10750 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) 1.11333 Nasser, Mrs. Nicholas (Adele Achem) 3.00708 Sandstrom, Miss. Marguerite Rut 1.67000 Bonnell, Miss. Elizabeth 2.65500 Saundercock, Mr. William Henry 0.80500 Andersson, Mr. Anders Johan 3.12750 Vestrom, Miss. Hulda Amanda Adolfina 0.78542 Hewlett, Mrs. (Mary D Kingcome) 1.60000 Rice, Master. Eugene 2.91250 Williams, Mr. Charles Eugene 1.30000 Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele) 1.80000 Masselmani, Mrs. Fatima 0.72250 Fynney, Mr. Joseph J 2.60000 Beesley, Mr. Lawrence 1.30000 McGowan, Miss. Anna \"Annie\" 0.80292 Sloper, Mr. William Thompson 3.55000 Palsson, Miss. Torborg Danira 2.10750 Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson) 3.13875 Emir, Mr. Farred Chehab 0.72250 Fortune, Mr. Charles Alexander 26.30000 O'Dwyer, Miss. Ellen \"Nellie\" 0.78792 Todoroff, Mr. Lalio 0.78958 ... Giles, Mr. Frederick Edward 1.15000 Swift, Mrs. Frederick Joel (Margaret Welles Barron) 2.59292 Sage, Miss. Dorothy Edith \"Dolly\" 6.95500 Gill, Mr. John William 1.30000 Bystrom, Mrs. (Karolina) 1.30000 Duran y More, Miss. Asuncion 1.38583 Roebling, Mr. Washington Augustus II 5.04958 van Melkebeke, Mr. Philemon 0.95000 Johnson, Master. Harold Theodor 1.11333 Balkic, Mr. Cerin 0.78958 Beckwith, Mrs. Richard Leonard (Sallie Monypeny) 5.25542 Carlsson, Mr. Frans Olof 0.50000 Vander Cruyssen, Mr. Victor 0.90000 Abelson, Mrs. Samuel (Hannah Wizosky) 2.40000 Najib, Miss. Adele Kiamie \"Jane\" 0.72250 Gustafsson, Mr. Alfred Ossian 0.98458 Petroff, Mr. Nedelio 0.78958 Laleff, Mr. Kristo 0.78958 Potter, Mrs. Thomas Jr (Lily Alexenia Wilson) 8.31583 Shelley, Mrs. William (Imanita Parrish Hall) 2.60000 Markun, Mr. Johann 0.78958 Dahlberg, Miss. Gerda Ulrika 1.05167 Banfield, Mr. Frederick James 1.05000 Sutehall, Mr. Henry Jr 0.70500 Rice, Mrs. William (Margaret Norton) 2.91250 Montvila, Rev. Juozas 1.30000 Graham, Miss. Margaret Edith 3.00000 Johnston, Miss. Catherine Helen \"Carrie\" 2.34500 Behr, Mr. Karl Howell 3.00000 Dooley, Mr. Patrick 0.77500 Name: Fare, Length: 891, dtype: float64 def newfeature (x): return 10 + x / 3 + x ** 2 df1[ 'Fare' ] . apply(newfeature) Name Braund, Mr. Owen Harris 64.979167 Cumings, Mrs. John Bradley (Florence Briggs Thayer) 5115.069959 Heikkinen, Miss. Laina 75.447292 Futrelle, Mrs. Jacques Heath (Lily May Peel) 2847.310000 Allen, Mr. William Henry 77.485833 Moran, Mr. James 84.362272 McCarthy, Mr. Timothy J 2717.006406 Palsson, Master. Gosta Leonard 461.180625 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) 137.661469 Nasser, Mrs. Nicholas (Adele Achem) 924.276613 Sandstrom, Miss. Marguerite Rut 294.456667 Bonnell, Miss. Elizabeth 723.752500 Saundercock, Mr. William Henry 77.485833 Andersson, Mr. Anders Johan 998.550625 Vestrom, Miss. Hulda Amanda Adolfina 74.306524 Hewlett, Mrs. (Mary D Kingcome) 271.333333 Rice, Master. Eugene 867.973958 Williams, Mr. Charles Eugene 183.333333 Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele) 340.000000 Masselmani, Mrs. Fatima 64.608958 Fynney, Mr. Joseph J 694.666667 Beesley, Mr. Lawrence 183.333333 McGowan, Miss. Anna \"Annie\" 77.144453 Sloper, Mr. William Thompson 1282.083333 Palsson, Miss. Torborg Danira 461.180625 Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson) 1005.637656 Emir, Mr. Farred Chehab 64.608958 Fortune, Mr. Charles Alexander 69266.666667 O'Dwyer, Miss. Ellen \"Nellie\" 74.708193 Todoroff, Mr. Lalio 74.975591 ... Giles, Mr. Frederick Edward 146.083333 Swift, Mrs. Frederick Joel (Margaret Welles Barron) 690.966479 Sage, Miss. Dorothy Edith \"Dolly\" 4870.385833 Gill, Mr. John William 183.333333 Bystrom, Mrs. (Karolina) 183.333333 Duran y More, Miss. Asuncion 206.671912 Roebling, Mr. Washington Augustus II 2576.657751 van Melkebeke, Mr. Philemon 103.416667 Johnson, Master. Harold Theodor 137.661469 Balkic, Mr. Cerin 74.975591 Beckwith, Mrs. Richard Leonard (Sallie Monypeny) 2789.462004 Carlsson, Mr. Frans Olof 36.666667 Vander Cruyssen, Mr. Victor 94.000000 Abelson, Mrs. Samuel (Hannah Wizosky) 594.000000 Najib, Miss. Adele Kiamie \"Jane\" 64.608958 Gustafsson, Mr. Alfred Ossian 110.221711 Petroff, Mr. Nedelio 74.975591 Laleff, Mr. Kristo 74.975591 Potter, Mrs. Thomas Jr (Lily Alexenia Wilson) 6953.022292 Shelley, Mrs. William (Imanita Parrish Hall) 694.666667 Markun, Mr. Johann 74.975591 Dahlberg, Miss. Gerda Ulrika 124.106546 Banfield, Mr. Frederick James 123.750000 Sutehall, Mr. Henry Jr 62.052500 Rice, Mrs. William (Margaret Norton) 867.973958 Montvila, Rev. Juozas 183.333333 Graham, Miss. Margaret Edith 920.000000 Johnston, Miss. Catherine Helen \"Carrie\" 567.719167 Behr, Mr. Karl Howell 920.000000 Dooley, Mr. Patrick 72.645833 Name: Fare, Length: 891, dtype: float64","title":"Lambda Transform"},{"location":"Lambda/lambda/#lambda-transformation","text":"import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt % matplotlib inline","title":"Lambda Transformation"},{"location":"Lambda/lambda/#load-data","text":"titanic = pd . read_csv( 'data/titanic.csv' )","title":"Load data"},{"location":"Lambda/lambda/#setting-name-column-as-index","text":"df1 = titanic . copy(deep = True ) df1 = titanic . set_index( 'Name' ) df1 . head( 2 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Name Braund, Mr. Owen Harris 1 0 3 male 22.0 1 0 A/5 21171 7.2500 NaN S Cumings, Mrs. John Bradley (Florence Briggs Thayer) 2 1 1 female 38.0 1 0 PC 17599 71.2833 C85 C","title":"Setting Name column as index"},{"location":"Lambda/lambda/#lambda-transformation_1","text":"df1[ 'Fare' ] . apply( lambda x: ( 10 * x ** 2 + 2 * x + 4 ) / 10 ) Name Braund, Mr. Owen Harris 0.72500 Cumings, Mrs. John Bradley (Florence Briggs Thayer) 7.12833 Heikkinen, Miss. Laina 0.79250 Futrelle, Mrs. Jacques Heath (Lily May Peel) 5.31000 Allen, Mr. William Henry 0.80500 Moran, Mr. James 0.84583 McCarthy, Mr. Timothy J 5.18625 Palsson, Master. Gosta Leonard 2.10750 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) 1.11333 Nasser, Mrs. Nicholas (Adele Achem) 3.00708 Sandstrom, Miss. Marguerite Rut 1.67000 Bonnell, Miss. Elizabeth 2.65500 Saundercock, Mr. William Henry 0.80500 Andersson, Mr. Anders Johan 3.12750 Vestrom, Miss. Hulda Amanda Adolfina 0.78542 Hewlett, Mrs. (Mary D Kingcome) 1.60000 Rice, Master. Eugene 2.91250 Williams, Mr. Charles Eugene 1.30000 Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele) 1.80000 Masselmani, Mrs. Fatima 0.72250 Fynney, Mr. Joseph J 2.60000 Beesley, Mr. Lawrence 1.30000 McGowan, Miss. Anna \"Annie\" 0.80292 Sloper, Mr. William Thompson 3.55000 Palsson, Miss. Torborg Danira 2.10750 Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson) 3.13875 Emir, Mr. Farred Chehab 0.72250 Fortune, Mr. Charles Alexander 26.30000 O'Dwyer, Miss. Ellen \"Nellie\" 0.78792 Todoroff, Mr. Lalio 0.78958 ... Giles, Mr. Frederick Edward 1.15000 Swift, Mrs. Frederick Joel (Margaret Welles Barron) 2.59292 Sage, Miss. Dorothy Edith \"Dolly\" 6.95500 Gill, Mr. John William 1.30000 Bystrom, Mrs. (Karolina) 1.30000 Duran y More, Miss. Asuncion 1.38583 Roebling, Mr. Washington Augustus II 5.04958 van Melkebeke, Mr. Philemon 0.95000 Johnson, Master. Harold Theodor 1.11333 Balkic, Mr. Cerin 0.78958 Beckwith, Mrs. Richard Leonard (Sallie Monypeny) 5.25542 Carlsson, Mr. Frans Olof 0.50000 Vander Cruyssen, Mr. Victor 0.90000 Abelson, Mrs. Samuel (Hannah Wizosky) 2.40000 Najib, Miss. Adele Kiamie \"Jane\" 0.72250 Gustafsson, Mr. Alfred Ossian 0.98458 Petroff, Mr. Nedelio 0.78958 Laleff, Mr. Kristo 0.78958 Potter, Mrs. Thomas Jr (Lily Alexenia Wilson) 8.31583 Shelley, Mrs. William (Imanita Parrish Hall) 2.60000 Markun, Mr. Johann 0.78958 Dahlberg, Miss. Gerda Ulrika 1.05167 Banfield, Mr. Frederick James 1.05000 Sutehall, Mr. Henry Jr 0.70500 Rice, Mrs. William (Margaret Norton) 2.91250 Montvila, Rev. Juozas 1.30000 Graham, Miss. Margaret Edith 3.00000 Johnston, Miss. Catherine Helen \"Carrie\" 2.34500 Behr, Mr. Karl Howell 3.00000 Dooley, Mr. Patrick 0.77500 Name: Fare, Length: 891, dtype: float64 def newfeature (x): return 10 + x / 3 + x ** 2 df1[ 'Fare' ] . apply(newfeature) Name Braund, Mr. Owen Harris 64.979167 Cumings, Mrs. John Bradley (Florence Briggs Thayer) 5115.069959 Heikkinen, Miss. Laina 75.447292 Futrelle, Mrs. Jacques Heath (Lily May Peel) 2847.310000 Allen, Mr. William Henry 77.485833 Moran, Mr. James 84.362272 McCarthy, Mr. Timothy J 2717.006406 Palsson, Master. Gosta Leonard 461.180625 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) 137.661469 Nasser, Mrs. Nicholas (Adele Achem) 924.276613 Sandstrom, Miss. Marguerite Rut 294.456667 Bonnell, Miss. Elizabeth 723.752500 Saundercock, Mr. William Henry 77.485833 Andersson, Mr. Anders Johan 998.550625 Vestrom, Miss. Hulda Amanda Adolfina 74.306524 Hewlett, Mrs. (Mary D Kingcome) 271.333333 Rice, Master. Eugene 867.973958 Williams, Mr. Charles Eugene 183.333333 Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele) 340.000000 Masselmani, Mrs. Fatima 64.608958 Fynney, Mr. Joseph J 694.666667 Beesley, Mr. Lawrence 183.333333 McGowan, Miss. Anna \"Annie\" 77.144453 Sloper, Mr. William Thompson 1282.083333 Palsson, Miss. Torborg Danira 461.180625 Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson) 1005.637656 Emir, Mr. Farred Chehab 64.608958 Fortune, Mr. Charles Alexander 69266.666667 O'Dwyer, Miss. Ellen \"Nellie\" 74.708193 Todoroff, Mr. Lalio 74.975591 ... Giles, Mr. Frederick Edward 146.083333 Swift, Mrs. Frederick Joel (Margaret Welles Barron) 690.966479 Sage, Miss. Dorothy Edith \"Dolly\" 4870.385833 Gill, Mr. John William 183.333333 Bystrom, Mrs. (Karolina) 183.333333 Duran y More, Miss. Asuncion 206.671912 Roebling, Mr. Washington Augustus II 2576.657751 van Melkebeke, Mr. Philemon 103.416667 Johnson, Master. Harold Theodor 137.661469 Balkic, Mr. Cerin 74.975591 Beckwith, Mrs. Richard Leonard (Sallie Monypeny) 2789.462004 Carlsson, Mr. Frans Olof 36.666667 Vander Cruyssen, Mr. Victor 94.000000 Abelson, Mrs. Samuel (Hannah Wizosky) 594.000000 Najib, Miss. Adele Kiamie \"Jane\" 64.608958 Gustafsson, Mr. Alfred Ossian 110.221711 Petroff, Mr. Nedelio 74.975591 Laleff, Mr. Kristo 74.975591 Potter, Mrs. Thomas Jr (Lily Alexenia Wilson) 6953.022292 Shelley, Mrs. William (Imanita Parrish Hall) 694.666667 Markun, Mr. Johann 74.975591 Dahlberg, Miss. Gerda Ulrika 124.106546 Banfield, Mr. Frederick James 123.750000 Sutehall, Mr. Henry Jr 62.052500 Rice, Mrs. William (Margaret Norton) 867.973958 Montvila, Rev. Juozas 183.333333 Graham, Miss. Margaret Edith 920.000000 Johnston, Miss. Catherine Helen \"Carrie\" 567.719167 Behr, Mr. Karl Howell 920.000000 Dooley, Mr. Patrick 72.645833 Name: Fare, Length: 891, dtype: float64","title":"Lambda Transformation"}]}