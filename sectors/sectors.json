[
    {
        "domain": "Introduction",
        "titles": "Introduction to Pandas",
        "detail": "Pandas is an open-source Python library providing high-performance, easy-to-use data structures and data analysis tools. It is built on top of NumPy and is widely used for data manipulation and analysis.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Basics",
        "titles": "Pandas Installation",
        "detail": "Pandas can be installed using package managers like pip or conda. The command `pip install pandas` or `conda install pandas` installs the package.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Structures",
        "titles": "Series",
        "detail": "A Pandas Series is a one-dimensional labeled array capable of holding any data type. It is similar to a column in a spreadsheet or a database table.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Structures",
        "titles": "DataFrame",
        "detail": "A Pandas DataFrame is a two-dimensional labeled data structure with columns of potentially different types. It is similar to a spreadsheet or SQL table and is the most commonly used Pandas object.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Structures",
        "titles": "Index",
        "detail": "The Index object in Pandas is an immutable array that holds the labels for a Series or DataFrame. It is used for fast lookups and aligning data.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Creating Data",
        "titles": "Creating Series",
        "detail": "Series can be created from various data types such as lists, dictionaries, and NumPy arrays using the `pd.Series` function.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Creating Data",
        "titles": "Creating DataFrame",
        "detail": "DataFrames can be created from dictionaries of lists, lists of dictionaries, and NumPy arrays using the `pd.DataFrame` function.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Creating Data",
        "titles": "Reading Data from Files",
        "detail": "Pandas provides functions to read data from various file formats, including CSV, Excel, JSON, and SQL databases. Key functions include `pd.read_csv`, `pd.read_excel`, `pd.read_json`, and `pd.read_sql`.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Viewing Data",
        "titles": "Head and Tail",
        "detail": "The `head` and `tail` methods allow you to view the first and last few rows of a DataFrame or Series, respectively. They are useful for quickly inspecting the data.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Viewing Data",
        "titles": "Info and Describe",
        "detail": "The `info` method provides a concise summary of a DataFrame, including the data types and non-null values. The `describe` method generates descriptive statistics for numerical columns.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Viewing Data",
        "titles": "Data Types",
        "detail": "Pandas provides the `dtypes` attribute to view the data types of each column in a DataFrame. You can change data types using the `astype` method.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Selection",
        "titles": "Selecting Data by Label",
        "detail": "Data can be selected by label using the `loc` attribute. It allows for selecting rows and columns by their labels.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Selection",
        "titles": "Selecting Data by Position",
        "detail": "Data can be selected by position using the `iloc` attribute. It allows for selecting rows and columns by their integer positions.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Selection",
        "titles": "Boolean Indexing",
        "detail": "Boolean indexing allows for selecting data based on conditions. It is used by passing a boolean Series or DataFrame to the indexing operator.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Selection",
        "titles": "Setting Values",
        "detail": "Values in a DataFrame or Series can be set using the `loc` and `iloc` attributes or by direct assignment using the indexing operator.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Manipulation",
        "titles": "Handling Missing Data",
        "detail": "Pandas provides functions for detecting, removing, and filling missing data. Key functions include `isnull`, `dropna`, and `fillna`.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Manipulation",
        "titles": "Data Alignment",
        "detail": "Data alignment ensures that operations on Series and DataFrames are performed element-wise, based on the labels. This is achieved automatically when performing operations.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Manipulation",
        "titles": "Dropping Data",
        "detail": "Data can be dropped from a DataFrame using the `drop` method, specifying the labels of rows or columns to be removed.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Manipulation",
        "titles": "Filtering Data",
        "detail": "Data can be filtered using boolean conditions, the `query` method, and the `filter` method to select rows or columns based on specific criteria.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Manipulation",
        "titles": "Renaming Data",
        "detail": "Labels in a DataFrame or Series can be renamed using the `rename` method, specifying a mapping of old labels to new labels.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Manipulation",
        "titles": "Sorting Data",
        "detail": "Data can be sorted by index or by values using the `sort_index` and `sort_values` methods, respectively.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Aggregation",
        "titles": "GroupBy",
        "detail": "The `groupby` method allows for splitting data into groups based on some criteria and applying aggregate functions to each group.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Aggregation",
        "titles": "Aggregation Functions",
        "detail": "Pandas provides various aggregation functions such as `sum`, `mean`, `median`, and `count` that can be applied to groups of data.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Aggregation",
        "titles": "Pivot Tables",
        "detail": "Pivot tables summarize data by aggregating it based on specific values in columns and indexes. The `pivot_table` method creates pivot tables.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Aggregation",
        "titles": "Crosstab",
        "detail": "The `crosstab` function computes a cross-tabulation of two or more factors, summarizing data in a contingency table format.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Time Series",
        "titles": "Date and Time Handling",
        "detail": "Pandas provides functions for handling date and time data, including parsing dates, generating date ranges, and resampling time series data.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Time Series",
        "titles": "Time Series Analysis",
        "detail": "Time series analysis involves operations like shifting, resampling, and rolling windows. Key methods include `shift`, `resample`, and `rolling`.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Time Series",
        "titles": "Time Series Plotting",
        "detail": "Pandas integrates with matplotlib for plotting time series data, allowing for easy visualization of trends and patterns over time.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Visualization",
        "titles": "Basic Plotting",
        "detail": "Pandas provides easy-to-use plotting functionality built on top of matplotlib. The `plot` method can create line plots, bar plots, histograms, and more.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Visualization",
        "titles": "Plotting with Matplotlib",
        "detail": "Pandas integrates closely with matplotlib, allowing for more advanced plotting and customization. DataFrames and Series can be directly plotted using matplotlib's functions.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Data Visualization",
        "titles": "Seaborn Integration",
        "detail": "Pandas data structures integrate with Seaborn, a statistical data visualization library, to create complex visualizations with minimal code.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Advanced Topics",
        "titles": "Merging DataFrames",
        "detail": "Pandas provides functions for merging DataFrames based on common keys or indices. Key functions include `merge`, `join`, and `concat`.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Advanced Topics",
        "titles": "Concatenating Data",
        "detail": "Data can be concatenated along a particular axis using the `concat` function, combining multiple DataFrames or Series into one.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Advanced Topics",
        "titles": "Reshaping Data",
        "detail": "Data can be reshaped using functions like `melt`, `pivot`, and `stack`, which change the layout of data in a DataFrame.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Advanced Topics",
        "titles": "Handling Categorical Data",
        "detail": "Pandas supports categorical data, which can save memory and improve performance. The `Categorical` data type is used to store categorical variables.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Advanced Topics",
        "titles": "Sparse Data",
        "detail": "Pandas provides support for sparse data structures, which are memory-efficient for storing data with many missing or zero values.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Performance",
        "titles": "Performance Optimization",
        "detail": "Pandas includes techniques for optimizing performance, such as using vectorized operations, avoiding loops, and leveraging memory-efficient data types.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Performance",
        "titles": "Parallel Computing",
        "detail": "Pandas integrates with parallel computing libraries like Dask to handle large datasets and computationally intensive tasks efficiently.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Integration",
        "titles": "Integration with NumPy",
        "detail": "Pandas is built on top of NumPy, and they integrate seamlessly. NumPy arrays can be converted to Pandas Series or DataFrames, and many NumPy functions can be applied to Pandas objects.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Integration",
        "titles": "Integration with SQL Databases",
        "detail": "Pandas provides functions to read from and write to SQL databases, enabling seamless integration with relational database systems. Key functions include `read_sql` and `to_sql`.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Utilities",
        "titles": "Reading and Writing Files",
        "detail": "Pandas provides extensive support for reading and writing data in various file formats, including CSV, Excel, JSON, HTML, and HDF5. Key functions include `read_csv`, `to_csv`, `read_excel`, and `to_excel`.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Utilities",
        "titles": "Configuration",
        "detail": "Pandas allows for extensive configuration to customize its behavior and performance. The `set_option` and `get_option` functions are used to configure Pandas settings.",
        "subject": "Python Library - Pandas"
    },
    {
        "domain": "Utilities",
        "titles": "Testing and Debugging",
        "detail": "Pandas includes utilities for testing and debugging, such as the `pd.testing` module for writing test cases and verifying the correctness of code.",
        "subject": "Python Library - Pandas"
    }
]
